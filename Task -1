import json
from datetime import datetime

class Task:
    def __init__(self, description, priority='medium', due_date=None):
        self.description = description
        self.priority = priority
        self.due_date = due_date
        self.completed = False

    def mark_completed(self):
        self.completed = True

    def to_dict(self):
        return {
            'description': self.description,
            'priority': self.priority,
            'due_date': self.due_date,
            'completed': self.completed
        }

    @staticmethod
    def from_dict(task_dict):
        task = Task(task_dict['description'], task_dict['priority'], task_dict['due_date'])
        task.completed = task_dict['completed']
        return task

class ToDoList:
    def __init__(self, filename='tasks.json'):
        self.filename = filename
        self.tasks = self.load_tasks()

    def add_task(self, task):
        self.tasks.append(task)
        self.save_tasks()

    def remove_task(self, task_index):
        if 0 <= task_index < len(self.tasks):
            del self.tasks[task_index]
            self.save_tasks()

    def mark_task_completed(self, task_index):
        if 0 <= task_index < len(self.tasks):
            self.tasks[task_index].mark_completed()
            self.save_tasks()

    def load_tasks(self):
        try:
            with open(self.filename, 'r') as f:
                tasks_data = json.load(f)
                return [Task.from_dict(task) for task in tasks_data]
        except FileNotFoundError:
            return []

    def save_tasks(self):
        with open(self.filename, 'w') as f:
            tasks_data = [task.to_dict() for task in self.tasks]
            json.dump(tasks_data, f, indent=4)

    def display_tasks(self):
        if not self.tasks:
            print("No tasks available.")
        for i, task in enumerate(self.tasks):
            status = 'Completed' if task.completed else 'Pending'
            due_date = task.due_date if task.due_date else 'No due date'
            print(f"{i + 1}. {task.description} [Priority: {task.priority}, Due: {due_date}, Status: {status}]")

def main():
    todo_list = ToDoList()

    while True:
        print("\nTo-Do List Application")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. Mark Task as Completed")
        print("4. View Tasks")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            description = input("Enter task description: ")
            priority = input("Enter task priority (high, medium, low): ")
            due_date = input("Enter due date (YYYY-MM-DD) or leave blank: ")
            due_date = due_date if due_date else None
            task = Task(description, priority, due_date)
            todo_list.add_task(task)
            print("Task added.")
        
        elif choice == '2':
            task_index = int(input("Enter task number to remove: ")) - 1
            todo_list.remove_task(task_index)
            print("Task removed.")
        
        elif choice == '3':
            task_index = int(input("Enter task number to mark as completed: ")) - 1
            todo_list.mark_task_completed(task_index)
            print("Task marked as completed.")
        
        elif choice == '4':
            todo_list.display_tasks()
        
        elif choice == '5':
            print("Exiting application.")
            break
        
        else:
            print("Invalid choice. Please try again.")

if __name__ == '__main__':
    main()
