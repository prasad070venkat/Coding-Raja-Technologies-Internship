import json
import os
from datetime import datetime

class BudgetTracker:
    def __init__(self, storage_file='transactions.json'):
        self.storage_file = storage_file
        self.transactions = self.load_transactions()

    def load_transactions(self):
        if os.path.exists(self.storage_file):
            with open(self.storage_file, 'r') as file:
                return json.load(file)
        return []

    def save_transactions(self):
        with open(self.storage_file, 'w') as file:
            json.dump(self.transactions, file, indent=4)

    def add_transaction(self, type, category, amount):
        transaction = {
            'type': type,
            'category': category,
            'amount': amount,
            'date': str(datetime.now())
        }
        self.transactions.append(transaction)
        self.save_transactions()

    def calculate_budget(self):
        income = sum(t['amount'] for t in self.transactions if t['type'] == 'income')
        expenses = sum(t['amount'] for t in self.transactions if t['type'] == 'expense')
        return income - expenses

    def analyze_expenses(self):
        analysis = {}
        for transaction in self.transactions:
            if transaction['type'] == 'expense':
                category = transaction['category']
                amount = transaction['amount']
                if category in analysis:
                    analysis[category] += amount
                else:
                    analysis[category] = amount
        return analysis

    def list_transactions(self):
        for i, transaction in enumerate(self.transactions, 1):
            print(f"{i}. {transaction['type']} | {transaction['category']} | ${transaction['amount']} | {transaction['date']}")

    def run(self):
        while True:
            print("\nBudget Tracker")
            print("1. Add Income")
            print("2. Add Expense")
            print("3. View Budget")
            print("4. Analyze Expenses")
            print("5. List Transactions")
            print("6. Exit")
            choice = input("Choose an option: ")

            if choice == '1':
                category = input("Enter income category: ")
                amount = float(input("Enter amount: "))
                self.add_transaction('income', category, amount)
            elif choice == '2':
                category = input("Enter expense category: ")
                amount = float(input("Enter amount: "))
                self.add_transaction('expense', category, amount)
            elif choice == '3':
                budget = self.calculate_budget()
                print(f"Remaining Budget: ${budget}")
            elif choice == '4':
                analysis = self.analyze_expenses()
                print("Expense Analysis:")
                for category, amount in analysis.items():
                    print(f"{category}: ${amount}")
            elif choice == '5':
                self.list_transactions()
            elif choice == '6':
                break
            else:
                print("Invalid choice. Please try again.")

if __name__ == '__main__':
    app = BudgetTracker()
    app.run()
